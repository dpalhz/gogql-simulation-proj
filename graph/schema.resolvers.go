package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"fmt"
	"notes/graph/model"
	"notes/models"
	"time"
)

// AddNote is the resolver for the addNote field.
func (r *mutationResolver) AddNote(ctx context.Context, title string, body string, userID string) (*model.Note, error) {
	var user models.User
	// Ambil pengguna berdasarkan ID
	if err := r.DB.First(&user, "id = ?", userID).Error; err != nil {
		return nil, fmt.Errorf("user not found: %v", err)
	}

	note := &models.Note{
		Title:     title,
		Body:      body,
		CreatedAt: time.Now(),
		UserID:    user.ID, // Menetapkan ID pengguna ke UserID
	}

	// Simpan note ke database
	if err := r.DB.Create(note).Error; err != nil {
		return nil, err
	}

	// Konversi note GORM ke model GraphQL
	return &model.Note{
		ID:        note.ID.String(), // Mengonversi UUID ke string
		Title:     note.Title,
		Body:      note.Body,
		CreatedAt: note.CreatedAt,
        User: &model.User{ // Isi user dengan data pengguna yang diambil dari DB
            ID:       user.ID.String(), 
            Name:     user.Name,
            Username: user.Username,
        },
	}, nil
}



// UpdateNote is the resolver for the updateNote field.
func (r *mutationResolver) UpdateNote(ctx context.Context, id string, title *string, body *string) (*model.Note, error) {
	var note models.Note
	// Ambil catatan berdasarkan ID
	if err := r.DB.First(&note, "id = ?", id).Error; err != nil {
		return nil, fmt.Errorf("note not found: %v", err)
	}

	// Perbarui atribut yang diberikan
	if title != nil {
		note.Title = *title
	}
	if body != nil {
		note.Body = *body
	}

	// Simpan perubahan ke database
	if err := r.DB.Save(&note).Error; err != nil {
		return nil, err
	}

	// Konversi note GORM ke model GraphQL
	return &model.Note{
		ID:        note.ID.String(),
		Title:     note.Title,
		Body:      note.Body,
		CreatedAt: note.CreatedAt,
		User:      &model.User{ID: note.UserID.String()}, // Jika ingin menampilkan pengguna
	}, nil
}

// DeleteNote is the resolver for the deleteNote field.// DeleteNote is the resolver for the deleteNote field.
func (r *mutationResolver) DeleteNote(ctx context.Context, id string) (string, error) {
    // Cek apakah note dengan ID yang diberikan ada
    var note models.Note
    if err := r.DB.First(&note, "id = ?", id).Error; err != nil {
        return "", fmt.Errorf("note not found: %v", err)
    }

    // Hapus catatan dari database
    if err := r.DB.Delete(&note).Error; err != nil {
        return "", fmt.Errorf("failed to delete note: %v", err)
    }

    // Kembalikan ID catatan yang dihapus sebagai konfirmasi
    return id, nil
}


// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, username string, password string) (*model.User, error) {
    user := &models.User{
        Name:     name,
        Username: username,
        Password: password, // Jangan lupa untuk meng-hash password
    }

    // Simpan pengguna ke database
    if err := r.DB.Create(user).Error; err != nil {
        return nil, err
    }

    // Konversi user GORM ke model GraphQL
    return &model.User{
        ID:       user.ID.String(), // Mengonversi UUID ke string
        Name:     user.Name,
        Username: user.Username,
        Password: user.Password, // Hati-hati dengan pengembalian password
    }, nil
}


// GetNotes is the resolver for the getNotes field.
func (r *queryResolver) GetNotes(ctx context.Context) ([]*model.Note, error) {
	var notes []*models.Note
	if err := r.DB.Find(&notes).Error; err != nil {
		return nil, err
	}

	// Konversi notes GORM ke model GraphQL
	result := make([]*model.Note, len(notes))
	for i, note := range notes {
		result[i] = &model.Note{
			ID:        note.ID.String(),
			Title:     note.Title,
			Body:      note.Body,
			CreatedAt: note.CreatedAt,
			User:      &model.User{ID: note.UserID.String()}, // Jika ingin menampilkan pengguna
		}
	}

	return result, nil
}


// GetNoteByID is the resolver for the getNoteById field.
func (r *queryResolver) GetNoteByID(ctx context.Context, id string) (*model.Note, error) {
    var note model.Note
    if err := r.DB.First(&note, "id = ?", id).Error; err != nil {
        return nil, fmt.Errorf("note not found: %v", err)
    }
    return &note, nil
}


// GetUserByID is the resolver for the getUserById field.// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	var user models.User
	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, fmt.Errorf("user not found: %v", err)
	}
	// Konversi user GORM ke model GraphQL
	return &model.User{
		ID:       user.ID.String(),
		Name:     user.Name,
		Username: user.Username,
		Password: user.Password, // Hati-hati dengan pengembalian password
	}, nil
}


// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
