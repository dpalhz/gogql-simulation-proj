package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"notes/backend/graphql/model"
	"notes/backend/models"
	"notes/backend/utils"
	"time"

	"golang.org/x/crypto/bcrypt"
)

// AddNote is the resolver for the addNote field.
func (r *mutationResolver) AddNote(ctx context.Context, title string, body string, userID string) (*model.Note, error) {
	fmt.Println(ctx)
	userIdentifier := ctx.Value("session")
	fmt.Println("userIndetifier:", userIdentifier)
	fmt.Println()

	var user models.User
	// Ambil pengguna berdasarkan ID
	if err := r.DB.First(&user, "id = ?", userIdentifier.(*utils.Session).UserID).Error; err != nil {
		return nil, fmt.Errorf("user not found: %v", err)
	}

	note := &models.Note{
		Title:     title,
		Body:      body,
		CreatedAt: time.Now(),
		UserID:    user.ID,
	}

	// Simpan note ke database
	if err := r.DB.Create(note).Error; err != nil {
		return nil, err
	}

	// Konversi note GORM ke model GraphQL
	return &model.Note{
		ID:        note.ID.String(),
		Title:     note.Title,
		Body:      note.Body,
		CreatedAt: note.CreatedAt,
		User: &model.User{ // Isi user dengan data pengguna yang diambil dari DB
			ID:       user.ID.String(),
			Name:     user.Name,
			Username: user.Username,
		},
	}, nil
}

// UpdateNote is the resolver for the updateNote field.
func (r *mutationResolver) UpdateNote(ctx context.Context, id string, title *string, body *string) (*model.Note, error) {
	var note models.Note
	// Ambil catatan berdasarkan ID
	if err := r.DB.First(&note, "id = ?", id).Error; err != nil {
		return nil, fmt.Errorf("note not found: %v", err)
	}

	// Perbarui atribut yang diberikan
	if title != nil {
		note.Title = *title
	}
	if body != nil {
		note.Body = *body
	}

	// Simpan perubahan ke database
	if err := r.DB.Save(&note).Error; err != nil {
		return nil, err
	}

	// Konversi note GORM ke model GraphQL
	return &model.Note{
		ID:        note.ID.String(),
		Title:     note.Title,
		Body:      note.Body,
		CreatedAt: note.CreatedAt,
		UpdatedAt: note.UpdatedAt,
		User:      &model.User{ID: note.UserID.String()}, // Jika ingin menampilkan pengguna
	}, nil
}

// DeleteNote is the resolver for the deleteNote field.// DeleteNote is the resolver for the deleteNote field.
func (r *mutationResolver) DeleteNote(ctx context.Context, id string) (string, error) {
	// Cek apakah note dengan ID yang diberikan ada
	var note models.Note
	if err := r.DB.First(&note, "id = ?", id).Error; err != nil {
		return "", fmt.Errorf("note not found: %v", err)
	}

	if err := r.DB.Delete(&note).Error; err != nil {
		return "", fmt.Errorf("failed to delete note: %v", err)
	}

	return id, nil
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, name string, username string, password string) (*model.AuthPayload, error) {
	var user models.User

	// Periksa apakah username sudah ada
	if err := r.DB.First(&user, "username = ?", username).Error; err == nil {
		return nil, fmt.Errorf("username already taken")
	}

	// Hash password
	hash, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return nil, fmt.Errorf("failed to hash password: %v", err)
	}

	user = models.User{
		Name:     name,
		Username: username,
		Password: string(hash),
	}

	// Simpan pengguna ke database
	if err := r.DB.Create(&user).Error; err != nil {
		return nil, err
	}

	// Kembalikan AuthPayload
	return &model.AuthPayload{
		User: &model.User{
			ID:       user.ID.String(),
			Name:     user.Name,
			Username: user.Username,
		},
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*model.AuthPayload, error) {
	var user models.User

	// Ambil pengguna berdasarkan username
	if err := r.DB.First(&user, "username = ?", username).Error; err != nil {
		return nil, fmt.Errorf("invalid credentials: %v", err)
	}

	// Periksa password
	if err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(password)); err != nil {
		return nil, fmt.Errorf("invalid credentials: %v", err)
	}
	log.Println("masuk ke login prosess")

	utils.SetSession(ctx.Value("responseWriter").(http.ResponseWriter), user.ID.String())

	// Kembalikan AuthPayload
	return &model.AuthPayload{
		User: &model.User{
			ID:       user.ID.String(),
			Name:     user.Name,
			Username: user.Username,
		},
	}, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	// Logika logout bisa bervariasi tergantung pada implementasi token
	// Jika menggunakan stateful sessions, hapus token dari store
	// Untuk JWT, tidak ada tindakan khusus yang diperlukan di server

	return true, nil
}

// GetNotes is the resolver for the getNotes field.
func (r *queryResolver) GetNotes(ctx context.Context) ([]*model.Note, error) {
	var notes []*models.Note
	if err := r.DB.Find(&notes).Error; err != nil {
		return nil, err
	}

	// Konversi notes GORM ke model GraphQL
	result := make([]*model.Note, len(notes))
	for i, note := range notes {
		result[i] = &model.Note{
			ID:        note.ID.String(),
			Title:     note.Title,
			Body:      note.Body,
			CreatedAt: note.CreatedAt,
			User:      &model.User{ID: note.UserID.String()},
		}
	}

	return result, nil
}

// GetNoteByID is the resolver for the getNoteById field.
func (r *queryResolver) GetNoteByID(ctx context.Context, id string) (*model.Note, error) {
	var note model.Note
	if err := r.DB.First(&note, "id = ?", id).Error; err != nil {
		return nil, fmt.Errorf("note not found: %v", err)
	}
	return &note, nil
}

// GetUserByID is the resolver for the getUserById field.// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	var user models.User
	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, fmt.Errorf("user not found: %v", err)
	}
	// Konversi user GORM ke model GraphQL
	return &model.User{
		ID:       user.ID.String(),
		Name:     user.Name,
		Username: user.Username,
		Password: user.Password,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
