package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"fmt"
	graphql1 "notes/backend/graphql"
	"notes/backend/models"
	"notes/backend/utils"

	"github.com/google/uuid"
)

// AddNote is the resolver for the addNote field.
func (r *mutationResolver) AddNote(ctx context.Context, title string, body string, userID string) (*models.Note, error) {
	isAuth, err := utils.IsAuthenticated(ctx)
	if err != nil || !isAuth {
        return nil, err
    }

	parsedUserID, err := uuid.Parse(userID)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %w", err)
	}
	note, err := r.Services.NoteService.AddNote(title, body, parsedUserID)
	if err != nil {
		return nil, err
	}
	return note, nil
}

// UpdateNote is the resolver for the updateNote field.
func (r *mutationResolver) UpdateNote(ctx context.Context, id string, title *string, body *string) (*models.Note, error) {
	isAuth, err := utils.IsAuthenticated(ctx)
	if err != nil || !isAuth {
        return nil, err
    }
	
	note, err := r.Services.NoteService.UpdateNote(id, title, body)
	if err != nil {
		return nil, err
	}
	
	return note, nil
}


func (r *mutationResolver) DeleteNote(ctx context.Context, id string) (string, error) {
	isAuth, err := utils.IsAuthenticated(ctx)
	if err != nil || !isAuth {
        return id, err
    }
	
	_, err = r.Services.NoteService.DeleteNote(id)
	if err != nil {
		return id, err
	}
	return "Note deleted successfully " + id, nil
}

// ID is the resolver for the id field.
func (r *noteResolver) ID(ctx context.Context, obj *models.Note) (string, error) {
	return obj.ID.String(), nil
}

// User is the resolver for the user field.
func (r *noteResolver) User(ctx context.Context, obj *models.Note) (*models.User, error) {
	user, err := r.Services.NoteService.GetUserByIDNote(obj.UserID.String())
	if err != nil {
		return nil, err
	}
	return user, nil
}


// GetNotes is the resolver for the getNotes field.
func (r *queryResolver) GetNotes(ctx context.Context) ([]*models.Note, error) {
	notes, err := r.Services.NoteService.GetNotes()
	if err != nil {
		return nil, err
	}
	return notes, nil
}

// GetNoteByID is the resolver for the getNoteById field.
func (r *queryResolver) GetNoteByID(ctx context.Context, id string) (*models.Note, error) {
	note, err := r.Services.NoteService.GetNoteByID(id)
	if err != nil {
		return nil, err
	}
	return note, nil
}

// Note returns graphql1.NoteResolver implementation.
func (r *Resolver) Note() graphql1.NoteResolver { return &noteResolver{r} }

type noteResolver struct{ *Resolver }
