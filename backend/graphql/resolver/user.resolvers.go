package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	graphql1 "notes/backend/graphql"
	"notes/backend/models"
	"notes/backend/utils"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, name string, username string, password string) (*models.User, error) {

	user, err := r.Services.UserService.RegisterUser(name, username, password)
	if err != nil {
		return nil, err
	}

	return user, nil
}


func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*models.User, error) {

	user, err := r.Services.UserService.AuthenticateUser(username, password)
	if err != nil {
		return nil, err
	}

	utils.SetSession(ctx, user.ID.String())
	return user, nil
}


// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	return true, nil
}

func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*models.User, error) {
	user, err := r.Services.UserService.GetUserByID(id)
	if err != nil {
		return nil, err
	}
	return user, nil
}


// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *models.User) (string, error) {
	return obj.ID.String(), nil
}

func (r *userResolver) Notes(ctx context.Context, obj *models.User) ([]*models.Note, error) {

	notes, err := r.Services.UserService.GetUserNotes(obj.ID.String())
	if err != nil {
		return nil, err
	}
	return notes, nil
}


// User returns graphql1.UserResolver implementation.
func (r *Resolver) User() graphql1.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
